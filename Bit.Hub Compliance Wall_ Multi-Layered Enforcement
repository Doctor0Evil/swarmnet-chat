name: ComplianceGuardian â€” ALN Compliance Wall
on:
  push:
    branches: [ main, develop, earliest-critical ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
permissions:
  contents: read
  actions: read
  id-token: write
concurrency:
  group: "compliance-guardian-${{ github.ref }}"
  cancel-in-progress: false
env:
  BITHUB_AUDIT_DIR: .bithub/audit
  BITHUB_LOG_DIR: .bithub/logs
  BITHUB_POLICY_DIR: .bithub/policies
  BITHUB_TRACE_FILE: .bithub/audit/humor-reasoning-trace.json
  BITHUB_OPA_RESULT: .bithub/audit/opa-result.json
  BITHUB_VERDICT_FILE: .bithub/audit/compliance-verdict.json
  COMPLIANCE_LEVEL: strict
jobs:
  compliance-wall:
    name: ALN Gate + Hardware+Personality Compliance
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Init BitShell ALN Context
        shell: pwsh
        run: |
          Write-Host "::notice::Initializing ALN Compliance Environment..."
          $Context = @{
            Workflow = "${{ github.workflow }}"
            Ref      = "${{ github.ref }}"
            Actor    = "${{ github.actor }}"
            RunId    = "${{ github.run_id }}"
            Host     = "Bit.Hub"
            AuditType = "Hardware+Cybernetic"
          }
          $Context | ConvertTo-Json | Write-Host
      - name: Hardware/Integration Blocklist Check (ALN)
        shell: pwsh
        run: |
          $forbid_list = @('MT6883', 'arm64', 'mediatek', 'untrusted_cybernetics')
          $gathered = Get-Content "./hardware-inventory.txt" -Raw
          foreach ($forbid in $forbid_list) {
            if ($gathered -like "*$forbid*") {
              Write-Error "::error::Blocked chipset or hardware detected: $forbid"
              exit 1
            }
          }
          Write-Host "::notice::No forbidden hardware detected."
      - name: OPA Policy Enforcement
        shell: pwsh
        run: |
          $opaExe = "./bin/opa"
          if (-not (Test-Path $opaExe)) {
            Invoke-WebRequest -Uri "https://openpolicyagent.org/downloads/latest/opa_windows_amd64.exe" -OutFile $opaExe
          }
          & $opaExe eval --data .bithub/policies --input .bithub/audit/humor-reasoning-trace.json "data.bithub.allow"
      - name: Compliance Verdict & Immutable Audit
        shell: pwsh
        run: |
          $opa = Get-Content "${{ env.BITHUB_OPA_RESULT }}" | ConvertFrom-Json
          $verdict = @{
            pass  = [bool]$opa.pass
            level = "${{ env.COMPLIANCE_LEVEL }}"
            ts    = (Get-Date).ToUniversalTime().ToString("o")
            actor = "${{ github.actor }}"
          }
          $verdict | ConvertTo-Json -Depth 5 | Out-File -FilePath "${{ env.BITHUB_VERDICT_FILE }}" -Encoding utf8
      - name: Upload Audit Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: complianceguardian-audit
          path: |
            ${{ env.BITHUB_AUDIT_DIR }}
            ${{ env.BITHUB_LOG_DIR }}
            ${{ env.BITHUB_POLICY_DIR }}
