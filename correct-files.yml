# name: correct-files
name: Correct Files

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: correct-files-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  correct-files:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Add this so one OS failure doesn't cancel the others
      matrix:
        os: [windows-latest, ubuntu-24.04, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # The token is not strictly needed here as the default GITHUB_TOKEN is used by default
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Git credentials & token scopes
        id: perms
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "=== Remote URL ==="
          git remote -v
          echo "=== Testing connectivity to origin ==="
          if git ls-remote --exit-code origin &>/dev/null; then
            echo "✔ Can reach remote 'origin'."
          else
            echo "✖ Cannot reach remote 'origin'."
            exit 1
          fi
          echo "=== Inspecting GITHUB_TOKEN permissions ==="
          # Use the gh CLI for a more reliable permission check if available, otherwise fallback to curl
          if command -v gh &> /dev/null; then
            if gh auth status -h api.github.com | grep -q 'repo'; then
                echo "✔ Token has 'repo' scope (sufficient for push)."
                echo "has_push=true" >> "$GITHUB_OUTPUT"
            else
                echo "⚠ GITHUB_TOKEN may not have push access."
                echo "has_push=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "gh CLI not found, falling back to API check."
            perms_json=$(curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" \
                                  -H "Accept: application/vnd.github+json" \
                                  https://api.github.com/repos/${GITHUB_REPOSITORY})
            if echo "$perms_json" | grep -q '"push": true'; then
              echo "✔ Token has push access."
              echo "has_push=true" >> "$GITHUB_OUTPUT"
            else
              echo "⚠ GITHUB_TOKEN does not have push access — commit/push stage will be skipped."
              echo "has_push=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Install PowerShell (non-Windows)
        if: runner.os != 'Windows'
        uses: actions/setup-pwsh@v3 # Use the official setup-pwsh action
        with:
          version: 'latest'

      - name: Show PowerShell version
        shell: pwsh
        run: $PSVersionTable.PSVersion

      - name: Run manifest-driven ALN corrections
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $scriptsDir   = Join-Path $PWD 'scripts'
          $runnerScript = Join-Path $scriptsDir 'run-all-corrections.ps1'
          if (-not (Test-Path $runnerScript)) {
            throw "Correction runner not found at $runnerScript"
          }
          & $runnerScript

      - name: Commit & safe push corrections (auto-rebase and retry)
        if: steps.perms.outputs.has_push == 'true'
        shell: bash
        run: |
          set -e
          git config user.name "ALN File Corrector"
          git config user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Automated ALN file correction (manifest runner)"
          
          # Retry loop for pushing with rebase
          for i in 1 2 3; do
            # Pull with rebase to handle upstream changes
            if git pull --rebase origin "${GITHUB_REF_NAME}"; then
              # Push the changes
              if git push origin "${GITHUB_REF_NAME}"; then
                echo "Push successful on attempt $i."
                exit 0
              fi
            fi
            echo "Push failed on attempt $i. Retrying in 5s..."
            sleep 5
          done
          
          echo "::error::Push failed after 3 attempts."
          exit 1

      - name: Skip commit/push stage
        if: steps.perms.outputs.has_push != 'true'
        run: echo "Skipping commit/push stage — no token push access."

      - name: Upload Correction Audit Logs
        if: always() # Ensure artifacts upload even if a step fails
        uses: actions/upload-artifact@v4
        with:
          name: aln-correction-audit-logs-${{ matrix.os }}
          path: |
            scripts/audit-session.log
            scripts/log-*.txt
          retention-days: 14
