(defservice egress.guard
  ;; Centralized egress proxy enforcing manifests/compliance.wall.aln
  (let* ((policy (aln:load "manifests/compliance.wall.aln"))
         (allow (aln:get policy 'egress 'allow.domains))
         (deny  (aln:get policy 'egress 'deny.domains))
         (prot  (aln:get policy 'egress 'allow.protocols)))
    (defun wall:http (method url headers body)
      (assert (member (uri:scheme url) prot :test #'string=) "Protocol not allowed.")
      (when (domain:matches url deny)
        (audit:record 'egress-denied :url url :why 'denylist :bot-id (bot:self))
        (signal 'egress-denied))
      (unless (domain:matches url allow)
        (audit:record 'egress-denied :url url :why 'not-allowlisted :bot-id (bot:self))
        (signal 'egress-denied))
      (let ((scrubbed (headers:remove headers (aln:get policy 'egress 'redact.headers))))
        (rate:check 'egress (aln:get policy 'egress 'rate.window.seconds)
                          (aln:get policy 'egress 'rate.max.requests))
        (let ((resp (net:http:raw method url scrubbed body)))
          (audit:record 'egress-ok :url url :status (resp:status resp) :bot-id (bot:self))
          resp)))))

;; Helpers (stubs)
(defun domain:matches (url patterns)
  (some (lambda (p) (glob:match (uri:host url) p)) patterns))
