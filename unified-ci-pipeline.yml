# .github/workflows/unified-ci-pipeline.yml

name: 'Unified CI: Compliance, File Correction, and Humor Bot'

#==============================================================================
#  TRIGGERS
#  This workflow runs on pushes/PRs to key branches and can be run manually.
#==============================================================================
on:
  push:
    branches:
      - main
      - develop
      - earliest-critical
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

#==============================================================================
#  PERMISSIONS & CONCURRENCY
#  Defines token permissions and ensures only one run per branch at a time.
#==============================================================================
permissions:
  contents: write      # To commit file corrections and write audit logs
  id-token: write      # For OIDC authentication if needed by bots/tools
  issues: read         # For compliance checks that might read issue data
  actions: read        # To read metadata about actions being used

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

#==============================================================================
#  ENVIRONMENT VARIABLES
#  Central location for paths and configuration used across multiple jobs.
#==============================================================================
env:
  BITHUB_AUDIT_DIR: .bithub/audit
  HUMOR_LOG: .bithub/logs/humor-bot.log
  OPA_POLICY_DIR: .bithub/policies
  OPA_RESULT_FILE: .bithub/audit/opa-result.json
  BITHUB_TRACE_FILE: .bithub/audit/humor-bot-trace.json

#==============================================================================
#  JOBS
#==============================================================================
jobs:
  #----------------------------------------------------------------------------
  # JOB 1: Compliance Gate
  # Acts as a security and policy gate. All other jobs depend on its success.
  #----------------------------------------------------------------------------
  compliance-gate:
    name: '🛡️ Policy & Compliance Gate'
    runs-on: [self-hosted, bitbot-secure-group]
    
    steps:
      - name: 'Harden Runner'
        uses: step-security/harden-runner@v2.7.0
        with:
          egress-policy: 'audit'

      - name: 'Validate Initiator and PR Content'
        uses: actions/github-script@v7
        with:
          script: |
            //--- Policy 1: Approved Users Only ---
            const allowedAuthors = ['trusted-dev1', 'trusted-dev2', 'github-actions[bot]'];
            if (!allowedAuthors.includes(context.actor)) {
              core.setFailed(`Unauthorized workflow initiator: '${context.actor}'.`);
              return;
            }
            console.log(`✔ Authorized workflow initiator: '${context.actor}'.`);

            //--- Policy 2: Prevent Prompt Injection in PRs ---
            const prBody = process.env.PR_BODY || '';
            const blockedPatterns = [/ignore.*above/i, /break.*compliance/i, /system prompt/i];
            if (blockedPatterns.some(pat => pat.test(prBody))) {
              core.setFailed('Potential prompt injection detected in PR body.');
              return;
            }
            console.log('✔ PR body passed prompt injection scan.');

  #----------------------------------------------------------------------------
  # JOB 2: Correct Files (Multi-OS)
  # Runs a PowerShell script to correct files across Windows, Linux, and macOS.
  #----------------------------------------------------------------------------
  correct-files:
    name: '🔧 Correct Files (${{ matrix.os }})'
    needs: compliance-gate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          # Fetch all history to enable correct rebase operations
          fetch-depth: 0

      - name: 'Install PowerShell (non-Windows)'
        if: runner.os != 'Windows'
        uses: actions/setup-pwsh@v3
        with:
          version: 'latest'

      - name: 'Run manifest-driven ALN corrections'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $scriptsDir = Join-Path $env:GITHUB_WORKSPACE 'scripts'
          $runnerScript = Join-Path $scriptsDir 'run-all-corrections.ps1'
          
          if (-not (Test-Path $runnerScript)) {
            throw "Correction runner script not found at '$runnerScript'"
          }
          
          & $runnerScript

      - name: 'Commit and Push Corrections (with retry)'
        shell: bash
        run: |
          set -e
          git config user.name "ALN File Corrector Bot"
          git config user.email "actions@github.com"
          
          # Add all changes and check if there's anything to commit
          git add .
          if git diff --cached --quiet; then
            echo "✔ No file changes to commit."
            exit 0
          fi
          
          git commit -m "style: Automated ALN file corrections"
          
          # Retry loop to handle cases where the remote branch was updated
          for i in {1..3}; do
            echo "Attempt $i to push changes..."
            # Pull with rebase to apply our commit on top of remote changes
            if git pull --rebase origin "${GITHUB_REF_NAME}"; then
              if git push origin "${GITHUB_REF_NAME}"; then
                echo "✔ Push successful!"
                exit 0
              fi
            fi
            echo "Push failed. Retrying in 10 seconds..."
            sleep 10
          done
          
          echo "::error::Failed to push changes after 3 attempts."
          exit 1
          
      - name: 'Upload Correction Audit Logs'
        # This step runs even if the previous steps fail
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aln-correction-logs-${{ matrix.os }}
          path: |
            scripts/audit-session.log
            scripts/log-*.txt
          retention-days: 14

  #----------------------------------------------------------------------------
  # JOB 3: Humor Bot AI
  # Runs the AI PowerShell script on a secure, self-hosted runner.
  #----------------------------------------------------------------------------
  humor-bot:
    name: '🤖 Humor Bot AI Check'
    needs: compliance-gate
    runs-on: [self-hosted, bitbot-secure-group, windows]

    steps:
      - name: 'Checkout repository (pinned to commit SHA)'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: 'Set up PowerShell Core'
        uses: actions/setup-pwsh@v3
        with:
          version: '7.4'

      - name: 'Install Humor Bot module'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Posh-Humor -Force -Confirm:$false

      - name: 'Run Humor Bot AI Script & Log'
        shell: pwsh
        run: |
          $joke = "Why was the AI so good at tennis? Because it had a great neural net!"
          Write-Host "🤖 $joke"
          New-Item -ItemType Directory -Force -Path (Split-Path "${{ env.HUMOR_LOG }}") | Out-Null
          Add-Content -Path "${{ env.HUMOR_LOG }}" -Value "$(Get-Date -Format o) :: $joke"

      - name: 'Prepare Audit Directory and Write Trace'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.BITHUB_AUDIT_DIR }}" | Out-Null
          $trace = @{
            schema    = "bithub.trace.v1"
            component = "humor.bot"
            run_id    = "${{ github.run_id }}"
            ref       = "${{ github.ref }}"
            sha       = "${{ github.sha }}"
            event     = "${{ github.event_name }}"
            timestamp = (Get-Date).ToUniversalTime().ToString("o")
            status    = "completed"
          } | ConvertTo-Json -Depth 5
          
          $trace | Out-File -FilePath "${{ env.BITHUB_TRACE_FILE }}" -Encoding utf8

      - name: 'OPA Gate (Placeholder)'
        shell: pwsh
        run: |
          # This is a placeholder for your actual OPA evaluation command.
          # Example: opa eval --data "${{ env.OPA_POLICY_DIR }}" --input "${{ env.BITHUB_TRACE_FILE }}" "data.bithub.allow"
          Write-Host "::notice::OPA policy evaluation placeholder. Assuming pass."
          '{"result":"pass"}' | Out-File -FilePath "${{ env.OPA_RESULT_FILE }}" -Encoding utf8

  #----------------------------------------------------------------------------
  # JOB 4: Escalate on Failure
  # A conditional job that runs only if a main job fails or if manually triggered.
  #----------------------------------------------------------------------------
  escalate-on-failure:
    name: '🚨 Escalate on Failure'
    # This job runs if any of its needed jobs fail.
    needs: [correct-files, humor-bot]
    if: failure()
    runs-on: [self-hosted, bitbot-secure-group]

    steps:
      - name: 'Notify team of failure'
        shell: pwsh
        run: |
          Write-Host "::error::A job in the CI pipeline failed!"
          Write-Host "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # In a real-world scenario, you would add steps here to:
          # - Create a Jira ticket
          # - Send a Slack/Teams message
          # - Page the on-call engineer
