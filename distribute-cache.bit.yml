#!/usr/bin/env bash
set -euo pipefail

echo "[Bit.Hub] Compliance Block starting..."

# Load terms
TERMS_FILE=".bit/terms.compliance.yield.json"
if [ ! -f "$TERMS_FILE" ]; then
  echo "::error::Compliance terms file missing."
  exit 1
fi

# Check runner labels
if [[ "${RUNNER_LABELS:-}" != *"bit.hub"* ]]; then
  echo "::error::Runner not labeled for Bit.Hub compliance."
  exit 1
fi

# Check workflow file for required defaults
for wf in $(find .github/workflows -type f -name '*.yml' -o -name '*.yaml'); do
  if ! grep -q "permissions:" "$wf"; then
    echo "::error::Workflow $wf missing permissions block."
    exit 1
  fi
done

echo "[Bit.Hub] Compliance Block passed."

            - name: Cache
  uses: actions/cache@v4.2.4
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false
    # Run the post step to save the cache even if another step before fails
    save-always: # optional, default is false
          
